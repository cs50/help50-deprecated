#!/bin/bash -i

# listen for ctrl-c
trap "{ echo; exit 1; }" INT

# non-interactive stdin
# http://stackoverflow.com/a/18766794/5156190
if [[ $# -eq 0 ]]; then

    # allow input via pipe, disallow interactive input (as potentially confusing)
    if [[ -t 0 ]]; then
        echo "Careful, you forgot to tell me with which command you need help!"
        exit 1
    else
        script=$(cat)
        echo
    fi

# interactive stdin
elif [[ $# -eq 1 && "$1" == "-i" ]]; then
    shift
    script=$(cat)
    echo

# cmd
# capture and echo both stdout and stderr, http://stackoverflow.com/a/12451419/5156190
# preserve colorized output, http://stackoverflow.com/a/1402389
else
    exec 3>&1
    echo
    script=$(stdbuf -e 0 -o 0 bash -c -i "script --command \"bash -l -c \\\"$*\\\"\" --quiet --return /dev/null" |& tee >(cat - >&3))
    echo
fi

# URL for POST
if [[ -z "$APP_URL" ]]; then
    APP_URL=https://help.cs50.net/
fi

# POST /
echo -e -n "\033[33m";
echo -e -n "Asking for help..."
stdout=$(curl \
    --data-urlencode "cmd=$*" \
    --data-urlencode "format=ans" \
    --data-urlencode "script=$script" \
    --data-urlencode "username=$C9_USER" \
    --fail \
    --request POST \
    "$APP_URL" \
    2> /dev/null
)
status=$?
printf "\r%${COLUMNS}s\r"
if [[ $status -ne 0 ]]; then
    stdout="Ack, there seems to be a bug in help50! Please let sysadmins@cs50.harvard.edu known with which error you need help!"
fi
echo -e "$stdout" | fold -s -w "$COLUMNS"
echo -e "\033[0m"
